/* eslint-disable @next/next/no-img-element */
import Head from "next/head";
import Image from "next/image";

import { ApolloClient, InMemoryCache, gql } from "@apollo/client";

import Container from "@components/Container";
import Button from "@components/Button";
import Layout from "@components/Layout";

import styles from "@styles/Product.module.scss";

export default function Product({ product }) {
  return (
    <Layout>
      <Head>
        <title>{product.product_title}</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Container>
        <div className={styles["product-wrapper"]}>
          <div className={styles["product-image"]}>
            <Image
              width={product.image.width}
              height={product.image.height}
              src={product.image.src}
              alt={`Card for ${product.product_title}`}
            />
          </div>
          <div className={styles["product-content"]}>
            <h1>{product.product_title}</h1>
            <p className={styles["productPrice"]}>${product.price}</p>
            <p>
              <Button
                className="snipcart-add-item"
                data-item-id={product.id}
                data-item-price={product.price}
                data-item-url="/"
                data-item-description=""
                data-item-image={product.image.src}
                data-item-name={product.product_title}
              >
                Add to cart
              </Button>
            </p>
          </div>
        </div>
      </Container>
    </Layout>
  );
}

export async function getStaticProps({ params }) {
  const { slug } = params;

  const client = new ApolloClient({
    uri: "https://ecommerce-app-test.hasura.app/v1/graphql",
    headers: {
      "x-hasura-admin-secret": process.env.NEXT_HASURA_ADMIN_SECRET,
    },
    cache: new InMemoryCache(),
  });

  const response = await client.query({
    query: gql`
      query allProducts($slug: String) {
        products(where: { slug: { _eq: $slug } }) {
          id
          price
          slug
          image {
            src
            width
            height
          }
          product_title
        }
      }
    `,
    variables: {
      slug: slug,
    },
  });

  const product = response.data.products[0];
  return {
    props: {
      product,
    },
  };
}

export async function getStaticPaths() {
  const client = new ApolloClient({
    uri: "https://ecommerce-app-test.hasura.app/v1/graphql",
    headers: {
      "x-hasura-admin-secret": process.env.NEXT_HASURA_ADMIN_SECRET,
    },
    cache: new InMemoryCache(),
  });

  const response = await client.query({
    query: gql`
      query allProducts {
        products(order_by: { id: asc }) {
          slug
          id
        }
      }
    `,
  });

  const paths = response.data.products.map((product) => {
    return {
      params: {
        slug: product.slug,
      },
    };
  });

  return {
    paths,
    fallback: false,
  };
}
